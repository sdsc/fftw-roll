<?xml version="1.0" standalone="no"?>

<kickstart>

<description>
FFTW roll installation test.
http://www.fftw.org
</description>

<copyright>
Copyright (c) 2000 - 2011 The Regents of the University of California.
All rights reserved. Rocks(r) v5.1 www.rocksclusters.org
</copyright>

<changelog>
</changelog>

<post>

/bin/mkdir -m 0755 /root/rolltests

<file name="/root/rolltests/fftw.t" perms="0755">
<![CDATA[#!/usr/bin/perl -w
# fftw roll installation test.  Usage:
# fftw.t [nodetype]
#   where nodetype is one of "Compute", "Dbnode", "Frontend" or "Login"
#   if not specified, the test assumes either Compute or Frontend

use Test::More qw(no_plan);

my $appliance = $#ARGV >= 0 ? $ARGV[0] :
                -d '/export/rocks/install' ? 'Frontend' : 'Compute';
my $installedOnAppliancesPattern = '.';
my $output;

my $TESTFILE = 'rollfftw';

my @COMPILERS = (
  'ROLLCOMPILER',
);
my @NETWORKS = (
  'ROLLNETWORK',
);
my @MPIS = (
  'ROLLMPI',
);
my %CC = (
  'gnu' => 'gcc',
  'intel' => 'icc',
  'pgi' => 'pgcc'
);

open(OUT, ">$TESTFILE.c");
print OUT <<END;
#ifdef FFTW3
#include <fftw3.h>
#define c_re(X) X[0]
#define c_im(X) X[1]
#else
#include <fftw.h>
#endif
#include <stdio.h>

#define N 4

int main(int argc, char **argv) {
  fftw_complex *in, *out;
  fftw_plan p;
  int i;

  in = (fftw_complex*) fftw_malloc(sizeof(fftw_complex) * N);
  out = (fftw_complex*) fftw_malloc(sizeof(fftw_complex) * N);

  for(i = 0; i < N; i++) {
    c_re(in[i]) = i;
    c_im(in[i]) = 0.0;
  }

#ifdef FFTW3
  p = fftw_plan_dft_1d(N, in, out, FFTW_FORWARD, FFTW_ESTIMATE);
  fftw_execute(p);
#else
  p = fftw_create_plan(N, FFTW_FORWARD, FFTW_ESTIMATE);
  fftw(p, 1, in, 1, 0, out, 1, 0);
#endif

  fprintf(stdout, "{");
  for(i = 0 ; i < N; i++) {
    fprintf(stdout, " {%2.2f, %2.2f}", c_re(out[i]), c_im(out[i]));
  }
  fprintf(stdout, " }\\n");

  fftw_destroy_plan(p);
  fftw_free(in); fftw_free(out);
}
END

# fftw-common.xml
$output = `find /opt/fftw -name bin | grep -vs 2.1.5`;
foreach my $compiler (@COMPILERS) {
  foreach my $mpi (@MPIS) {
    if($appliance =~ /$installedOnAppliancesPattern/) {
      like($output, qr#$compiler/$mpi#, "fftw latest/$compiler/$mpi installed");
    } else {
      unlike($output, qr#$compiler/$mpi#,
             "fftw latest/$compiler/$mpi not installed");
    }
  }
}
$output = `find /opt/fftw/2.1.5 -name fftw.h`;
foreach my $compiler (@COMPILERS) {
  foreach my $mpi (@MPIS) {
    if($appliance =~ /$installedOnAppliancesPattern/) {
      like($output, qr#$compiler/$mpi#,
           "fftw v2.1.5/$compiler/$mpi installed");
    } else {
      unlike($output, qr#$compiler/$mpi#,
             "fftw v2.1.5/$compiler/$mpi not installed");
    }
  }
}

SKIP: {

  my $modulesInstalled = -f '/etc/profile.d/modules.sh';
  skip 'modules not installed', 1 if !$modulesInstalled;

  foreach my $compiler (@COMPILERS) {
    SKIP : {
      $output = `find /opt/fftw -name bin | grep -vs 2.1.5`;
      skip "fftw latest/$compiler not installed", 3
        if $output !~ m#$compiler/bin#;
      ok(-l "/opt/modulefiles/applications/.$compiler/fftw/.version",
         "module file for fftw/latest/$compiler installed");
      $output = `. /etc/profile.d/modules.sh; module load $compiler fftw; $CC{$compiler} -DFFTW3 -I\$FFTWHOME/include -L\$FFTWHOME/lib -o $TESTFILE.$compiler.exe $TESTFILE.c -lfftw3 -lm`;
      ok(-f "$TESTFILE.$compiler.exe",
         "compile/link using fftw/latest/$compiler");
      $output = `./$TESTFILE.$compiler.exe`;
      like($output, qr/{ {6.00, 0.00} {-2.00, 2.00} {-2.00, 0.00} {-2.00, -2.00} }/, "fftw latest/$compiler run");
    }
  }

  foreach my $compiler (@COMPILERS) {
    foreach my $mpi (@MPIS) {
      foreach my $network (@NETWORKS) {
        $output = `find /opt/fftw/2.1.5 -name fftw.h`;
        skip "fftw 2.1.5/$compiler not installed", 3
          if $output !~ m#$compiler/$mpi#;
        ok(-f "/opt/modulefiles/applications/.$compiler/fftw/2.1.5",
           "module file for fftw v2.1.5 for $compiler installed");
        $output = `. /etc/profile.d/modules.sh; module load $compiler ${mpi}_$network fftw/2.1.5; $CC{$compiler} -I\$FFTWHOME/include -L\$FFTWHOME/lib -o $TESTFILE.$compiler.$mpi.exe $TESTFILE.c -lfftw -lm`;
        ok(-f "$TESTFILE.$compiler.$mpi.exe",
           "compile/link using fftw v2.1.5 for $compiler/$mpi");
        $output = `./$TESTFILE.$compiler.$mpi.exe`;
        like($output, qr/{ {6.00, 0.00} {-2.00, 2.00} {-2.00, 0.00} {-2.00, -2.00} }/,
             "run using fftw v2.1.5 for $compiler/$mpi");
      }
    }
  }

}

# fftw-doc.xml
SKIP: {
  skip 'not server', 1 if $appliance ne 'Frontend';
  ok(-d '/var/www/html/roll-documentation/fftw', 'doc installed');
}

`rm -f $TESTFILE*`;
]]>
</file>

</post>

</kickstart> 
